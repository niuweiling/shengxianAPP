<?php


namespace app\index\controller;


use think\Controller;
use think\Db;
use think\Exception;
use think\Request;

class Orders extends Controller
{

	protected function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		checkToken();
	}
	/*
	 * 2、生成订单：待支付
	 * 3、修改购物车
	 *    3、1删除购物车生成购物车已下单商品
	 *    3、2购物车主表
	 *          修改信息：total：0  price：0
	 *          或者  删除购物车
	 *
	 * */
   public function save(Request $request){
	$uid=$this->request->id;
	$cart1=model('Cart');
	$cartinfo=$cart1->queryone($uid);

	if (!$cartinfo){
		return json([
			'code' => config('code.fail'),
			'msg' => "没有购物车"

		]);
	}
	if ($cartinfo['total']==0){
		return json([
			'code' => config('code.fail'),
			'msg' => "请选择至少一件商品"

		]);
	}

	//生成待支付订单
	   $ordermodel=model('Ordersmodel');
	  //用户uid
	   $ordersData=['uid'=>$uid];

	   //价格
	   $ordersData['price']=$cartinfo['price'];

	   //订单号
	   $ordersData['ordernum']=time().mt_rand(0,10000);
	   //状态
	   $ordersData['status']=0;
	   //购物车选中商品
	   $cartextmodel=model('Cartext');
	   $selectGoods=$cartextmodel->queryselectgoods(['uid'=>$uid,'status'=>1]);
	   $selectGoods=json_encode($selectGoods);
       $ordersData['goods']=$selectGoods;

	   //地址
	   $ordersData['aid']=0;
       Db::startTrans();
	   $ordersresult=$ordermodel->insertOrders($ordersData);

	   //操作购物车
	   //删除
	   $deletegoodsresult=$cartextmodel->deletegoods(['uid'=>$uid,'status'=>1]);

	   $existgoods=$cartextmodel->querygoods($uid);
	   if ($existgoods){
	   	//更新
		   $cartresult=$cart1->cartUpdate(['id'=>$uid],['total'=>0,'price'=>0]);
	   }else{
	   	//删除
		   $cartresult=$cart1->cartDelete(['id'=>$uid]);
	   }
	   if ($ordersresult&&$deletegoodsresult&&$cartresult){
	   	Db::commit();
		   return json([
			   'code' => config('code.success'),
			   'msg' => "下单成功",
			   'ordernum'=>$ordersData['ordernum']
			   ]);

	   }else{
	   	Db::rollback();
		   return json([
			   'code' => config('code.fail'),
			   'msg' => "下单失败"

		   ]);
	   }
}
   public function read($id){
   	$uid=$this->request->id;
   	$model=model('Ordersmodel');
   	try{
   		$orders=$model->queryone(['uid'=>$uid,'ordernum'=>$id]);

   		$goods=json_decode($orders['goods']);
   		$gid=array_map(function ($ele){return $ele->gid;},$goods);
//   		var_dump($gid);
		$ordersGoods=Db::table('goods')->field('id,gname,sale,gthumb')->where('id','in',$gid)->select();
//var_dump($ordersGoods);
		$ordersGoods=array_map(function ($ele,$ele1){
			$ele['num']=$ele1->num;
			return $ele;
		},$ordersGoods,$goods);


   		if ($orders){
		    return json([
			    'code' => config('code.success'),
			    'msg' => "获取订单成功",
		        'data'=>$ordersGoods,
			    'orders'=>$orders
		    ]);
	    }else{
		    return json([
			    'code' => config('code.fail'),
			    'msg' => "获取订单失败"

		    ]);
	    }
    }catch (Exception $exception){
	    return json([
		    'code' => config('code.fail'),
		    'msg' => "服务器错误"

	    ]);
    }
}
   public function update(Request $request,$id){
   	$uid=$this->request->id;
   	$data=$this->request->put();
   	//数据验证
	$ordersmodel=model('Ordersmodel');
	$result=$ordersmodel->updateOrders(['uid'=>$uid,'ordernum'=>$id],$data);
//	var_dump($result);
	if ($result){
		return json([
			'code' => config('code.success'),
			'msg' => "订单修改成功",
			'data'=>$result,
		]);

	}else{
		return json([
			'code' => config('code.fail'),
			'msg' => "订单修改失败"

		]);
	}
   }
}